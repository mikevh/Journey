angular.module('app', ['ngRoute', 'ngResource', 'ui.bootstrap']);

angular.module('app').config(function($routeProvider) {
    var routes = [
        { url: '/groups', config: { template: '<mv-groups></mv-groups>' } },
        { url: '/users', config: { template: '<users></users>'} },
        { url: '/groups/:id', config: { templateUrl: 'parts/groups/groupsEditTemplate.html', controller: 'groupsEditController' } },
        { url: '/users/:id', config: { templateUrl: 'parts/users/usersEditTemplate.html', controller: 'usersEditController' } }
    ];
    _.each(routes, function (x) { $routeProvider.when(x.url, x.config); });
    $routeProvider.otherwise({ redirectTo: '/groups' });
});

// angular.module('app').factory('Todo', function ($resource) {
//     return $resource('/api/todo/:id', { id: '@id' }, { 'update': { method: 'PUT' } }
//     );
// });

angular.module('app').factory('Group', function ($resource) {
    return $resource('/api/group/:id', { id: '@id' }, { 'update': { method: 'PUT' } } 
    );
});

angular.module('app').factory('User', function ($resource) { 
    return $resource('/api/users/:id', { id: '@id' }, { 'update': { method: 'PUT' } }
    );
});

angular.module('app').factory('AuthorizationRedirectInterceptor', function ($q, $window, Alerter) {
    return {
        responseError: function (responseError) {
            //if (responseError.status === 401) { // authentication issue
            //    $window.location = "/login?redirectUrl=" + encodeURIComponent(document.URL);
            //    return null;
            //}
            if (responseError.status === 404) {
                Alerter.add("Error 404: " + responseError.config.method + " " + responseError.config.url);
            } else {
                Alerter.add("Error status: " + responseError.status);
            }
            return $q.reject(responseError);
        }
    };
});

angular.module('app').config(function ($httpProvider) {
    $httpProvider.interceptors.push('AuthorizationRedirectInterceptor');
});
angular.module('app').directive('alerter', function() {
    return {
        templateUrl: 'parts/alerts/alerterTemplate.html'
    };
});
angular.module('app').factory('Alerter', function($rootScope) {
    $rootScope.alerts = [];

    var add = function (message) {
        $rootScope.alerts.push({ message: message });
    };

    var clear = function() {
        $rootScope.alerts = [];
    };

    return {
        add: add,
        clear: clear
    };
});

angular.module('app').controller('groupsController', function ($scope, $locale, $location, Group) {

    //     $scope.daysOfWeek = _.map($locale.DATETIME_FORMATS.DAY, function (x, i) {
    //         return { Id: i, Name: x };
    //     });
    // 
    //     $scope.dayOfWeekName = function(i) {
    //         return $locale.DATETIME_FORMATS.DAY[i];
    //     };
    //
    $scope.editGroup = function (g) {
        $location.path('/groups/' + g.id);
    };
    
    $scope.newGroup = function() {
        $location.path('/groups/0');
    };
    // 
    //     $scope.saveNew = function () {
    //         var entry = new Group();
    //         angular.extend(entry, $scope.n);
    //         entry.$save().then(function (data) {
    //             $scope.groups.push(data);
    //             $scope.cancelNew();
    //         });
    //     };
    // 
    //     $scope.cancelNew = function () {
    //         $scope.showNew = false;
    //     };
    // 
    //     $scope.add = function () {
    //         $scope.n = {
    //             name: '',
    //             leader: '',
    //             meetsOn: 4,
    //             notes: ''
    //         };
    //         $scope.showNew = true;
    //     };
    // 
    //     $scope.remove = function (g) {
    //         g.$delete().then(function () {
    //             var index = $scope.groups.indexOf(g);
    //             $scope.groups.splice(index, 1);
    //         });
    //     }

    Group.query().$promise.then(function (data) {
        $scope.groups = data;
    });

});

angular.module('app').controller('groupsEditController', function ($scope, $locale, $routeParams, $location, Group) {
    
    $scope.groupId = $routeParams.id;

    $scope.daysOfWeek = _.map($locale.DATETIME_FORMATS.DAY, function (x, i) {
        return { Id: i, Name: x };
    });

    $scope.save = function () {
         $scope.e.$update().then(function() {
            $location.path('/');
        });
    };

    $scope.cancel = function () {
        $location.path('/');
    };

    if($scope.groupId > 0) {
        Group.get({ id: $scope.groupId }).$promise.then(function (data) {
            $scope.e = data;
        });
    }        
    else {
        $scope.e = new Group();
        angular.extend($scope.e, 
        {
            id: 0,
            name: 's',
            leader: 'sd',
            meetsOn: 4,
            notes: 'ff'
        });
    }
});

angular.module('app').directive('mvGroups', function () {
    return {
        templateUrl: 'parts/groups/groupsTemplate.html',
        controller: 'groupsController'
    };
});

angular.module('app').controller('chooserController', function ($scope, $timeout) {

	$scope.add = function () {
		var ids = _.pluck($scope.leftSelected, 'id');
		$scope.selectedIds = $scope.selectedIds.concat(ids);
		$scope.leftSelected = [];
	};

	$scope.remove = function () {
		var ids = _.pluck($scope.rightSelected, 'id');
		$scope.selectedIds = _.difference($scope.selectedIds, ids);
		$scope.rightSelected = [];
	};

	$scope.$watch('selectedIds', function () {
		$scope.left = _.filter($scope.all, function (x) {
			var index = $scope.selectedIds.indexOf(x.id);
			return index === -1;
		});

		$scope.right = _.filter($scope.all, function (x) {
			var index = $scope.selectedIds.indexOf(x.id);
			return index > -1;
		})
	});
});

angular.module('app').directive('chooser', function () {
    return {
        scope: {
            all: '=',
            selectedIds: '=', // the ids from the objects in all that are selected
            leftTitle: '@',
            rightTitle: '@'
        },
        templateUrl: 'parts/chooser/chooserTemplate.html',
        controller: 'chooserController'
    };
});
angular.module('app').controller('mvMenuController', function($scope, $location) {
	
	// used to add active class on top menu bar
	$scope.isActive = function(path) {
		return $location.path().indexOf(path) > -1;	
	};
	
});
angular.module('app').directive('mvMenu', function () {
    return {
        templateUrl: 'parts/menu/menuTemplate.html',
        controller: 'mvMenuController'
    };
});

angular.module('app').directive('mvTodos', function () {
    return {
        templateUrl: 'parts/todos/todosTemplate.html',
        controller: 'todoController'
    };
});

angular.module('app').controller('todoController', function ($scope, Todo) {
    
    $scope.saveNew = function () {
        var entry = new Todo();
        angular.extend(entry, $scope.n);
        entry.$save().then(function (data) {
            $scope.todos.push(data);
            $scope.cancelNew();
        });
    };

    $scope.cancelNew = function () {
        $scope.showNewTodo = false;
    };

    $scope.saveEdit = function (t) {
        t.$update().then(function () {
            t.isEditing = false;
        });
    };

    $scope.cancelEdit = function (t) {
        t.title = t.previousTitle;
        t.isEditing = false;
    };

    $scope.openEdit = function (t) {
        t.previousTitle = t.title;
        t.isEditing = true;
    };

    $scope.add = function () {
        $scope.n = { title: '' };
        $scope.showNewTodo = true;
    };

    $scope.remove = function (t) {
        t.$delete().then(function () {
            var index = $scope.todos.indexOf(t);
            $scope.todos.splice(index, 1);
        });
    }

    $scope.toggleDone = function (t) {
        t.isDone = !t.isDone;
        t.$update();
    }
    
    Todo.query().$promise.then(function (data) {
        $scope.todos = data;
    });
    
});

angular.module('app').controller('passwordModalController', function ($scope, $modalInstance) {

    $scope.okIsDisabled = function () {
        return $scope.password === undefined ||
            $scope.confirmPassword === undefined ||
            $scope.password !== $scope.confirmPassword;
    };

    $scope.modalOk = function () {
        $modalInstance.close($scope.password);
    };

    $scope.modalCancel = function () {
        $modalInstance.dismiss('cancel');
    };
});
angular.module('app').controller('usersController', function ($scope, $location, User) {
	
    $scope.edit = function (l) {
		$location.path('/users/' + l.id);
	};
	
	User.query().$promise.then(function(data) {
		$scope.users = data;
	});
});

angular.module('app').directive('users', function () {
    return {
        templateUrl: 'parts/users/usersTemplate.html',
        controller: 'usersController'
    };
});

angular.module('app').controller('usersEditController', function($scope, $routeParams, $location, $uibModal, Alerter, User) {

    $scope.userId = $routeParams.id;

    $scope.save = function () {
        $scope.e.$update().then(function() {
            $location.path('/users');
        });
    };

    $scope.changePassword = function() {

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'parts/users/passwordModalTemplate.html',
            controller: 'passwordModalController'
        });

        modalInstance.result.then(function (password) {
            $scope.e.resetPassword = password;
        });
    };

    $scope.saveNew = function() {
        var x = new User();
        x.userName = 'admin2';
        x.email = 'foo@bar.com';
        x.resetPassword = 'Pass@word2';
        x.$save().then(function(data) {
            debugger;
        }, function(err) {
            deugger;
        });
    };

    $scope.cancel = function () {
        $location.path('/users');
    };

    if ($scope.userId !== 0) {
        User.get({ id: $scope.userId }).$promise.then(function (data) {
            $scope.e = data; 
        });
    }
    else {
        console.log('not implemented');
        $scope.e = new User();
        angular.extend($scope.e,
        {
            id: 0,
            name: 's',
            leader: 'sd' 
        });
    }
});
