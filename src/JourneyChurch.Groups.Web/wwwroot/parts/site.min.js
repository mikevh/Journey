(function () {
    'use strict';
    var app = angular.module('app', ['ngRoute', 'ngResource', 'ngMaterial']);

    app.config(function ($routeProvider) {
        var routes = [
            { url: '/groups', config: { template: '<mv-groups></mv-groups>' } },
            { url: '/users', config: { template: '<users></users>' } },
            { url: '/reports/forgroup/:groupId', config: { templateUrl: '/parts/reports/newReportTemplate.html', controller: 'reportController'} },
            { url: '/reports/:id', config: { templateUrl: '/parts/reports/newReportTemplate.html', controller: 'reportEditController'} },
            //{ url: '/meetings/:id', config: { templateUrl: 'parts/meetings/meetingsTemplate.html', controller: 'meetingsController' } },
            { url: '/groups/:id', config: { templateUrl: 'parts/groups/groupsEditTemplate.html', controller: 'groupsEditController' } },
            { url: '/users/:id', config: { templateUrl: 'parts/users/usersEditTemplate.html', controller: 'usersEditController' } },
            { url: '/login', config: { templateUrl: 'parts/login/loginForm.html', controller: 'loginController' } }
        ];
        _.each(routes, function (x) { $routeProvider.when(x.url, x.config); });
        $routeProvider.otherwise({ redirectTo: '/groups' });
    });

    app.factory('AuthorizationRedirectInterceptor', function ($q, $window, $log) {
        return {
            responseError: function (responseError) {
                //if (responseError.status === 401) { // authentication issue
                //    $window.location = "/login?redirectUrl=" + encodeURIComponent(document.URL);
                //    return null;
                //}
                if (responseError.status === 404) {
                    $log.error("Error 404: " + responseError.config.method + " " + responseError.config.url);
                } else if (responseError.data) {
                    $log.error(responseError.data);
                } else {
                    $log.error("Error status: " + responseError.status);
                }
                return $q.reject(responseError);
            }
        };
    });

    app.config(function ($httpProvider) {
        $httpProvider.interceptors.push('AuthorizationRedirectInterceptor');
    });

    // app.run(function($rootScope, $log) {
    //     $rootScope.$on('$routeChangeStart', function (event, next, current) {
    //        if (next.$$route) {
    //            $log.log('Route change to ' + next.$$route.originalPath);
    //        }
    //        else if (next.redirectTo) {
    //            $log.log('Route change to ' + next.redirectTo);
    //        } else {
    //            debugger;
    //        }
    //     });
    // 
    //     $rootScope.$on('$locationChangeSuccess', function(event, next, current, d, e) {
    //        $log.log('location change from ' + current + ' to ' + next + ' ' + d + ' ' + e);
    //     });
    // });
})();
(function () {
    'use strict';

    var app = angular.module('app');

    app.factory('GroupData', function ($resource, $http) {

        var resource = $resource('/api/group/:id', { id: '@id' }, { 'update': { method: 'PUT' } } );

        var latestReports = function() {
            return $http.get('/api/group/getLatestReports').then(function(result) {
                return result;
            });
        };

        return {
            resource: resource,
            latestReports: latestReports
        };
    });

    app.factory('User', function ($resource) {
        return $resource('/api/users/:id', { id: '@id' }, { 'update': { method: 'PUT' } }
        );
    });

    app.factory('Meeting', function ($resource) {
        return $resource('/api/meeting/:id', { id: '@id' }, { 'update': { method: 'PUT' } }
        );
    });

    app.factory('ReportData', function($resource) {
        return $resource('/api/report/:id', { id: '@id' }, { 'update': { method: 'PUT' } }
        );
    });

    app.factory('Toaster', function ($mdToast) {
        var toast = function (message, time) {
            $mdToast.show(
              $mdToast.simple().textContent(message)
                .position('top right')
                .hideDelay(time || 3000)
            );
        };
        return {
            toast: toast
        };
    });

})();

(function() {
    'use strict';
    angular.module('app').controller('chooserController', function ($scope, $timeout) {

	    $scope.add = function () {
		    var ids = _.pluck($scope.leftSelected, 'id');
		    $scope.selectedIds = $scope.selectedIds.concat(ids);
		    $scope.leftSelected = [];
	    };

	    $scope.remove = function () {
		    var ids = _.pluck($scope.rightSelected, 'id');
		    $scope.selectedIds = _.difference($scope.selectedIds, ids);
		    $scope.rightSelected = [];
	    };

	    $scope.$watch('selectedIds', function () {
		    $scope.left = _.filter($scope.all, function (x) {
			    var index = $scope.selectedIds.indexOf(x.id);
			    return index === -1;
		    });

		    $scope.right = _.filter($scope.all, function (x) {
			    var index = $scope.selectedIds.indexOf(x.id);
			    return index > -1;
		    })
	    });
    });
})();

(function () {
    'use strict';
    angular.module('app').directive('chooser', function () {
        return {
            scope: {
                all: '=',
                selectedIds: '=', // the ids from the objects in all that are selected
                leftTitle: '@',
                rightTitle: '@'
            },
            templateUrl: 'parts/chooser/chooserTemplate.html',
            controller: 'chooserController'
        };
    });

})();
(function () {
    'use strict';

    angular.module('app').controller('groupsController', function ($scope, $locale, $location, GroupData) {

        //     $scope.daysOfWeek = _.map($locale.DATETIME_FORMATS.DAY, function (x, i) {
        //         return { Id: i, Name: x };
        //     });
        // 
        //     $scope.dayOfWeekName = function(i) {
        //         return $locale.DATETIME_FORMATS.DAY[i];
        //     };
        //

        $scope.addReport = function (id) {
            $location.path('/reports/forgroup/' + id);
        };

        $scope.editGroup = function (g) {
            $location.path('/groups/' + g.id);
        }; 
    
        $scope.newGroup = function () {
            $location.path('/groups/0');
        };
        // 
        //     $scope.saveNew = function () {
        //         var entry = new Group();
        //         angular.extend(entry, $scope.n);
        //         entry.$save().then(function (data) {
        //             $scope.groups.push(data);
        //             $scope.cancelNew();
        //         });
        //     };
        // 
        //     $scope.cancelNew = function () {
        //         $scope.showNew = false;
        //     };
        // 
        //     $scope.add = function () {
        //         $scope.n = {
        //             name: '',
        //             leader: '',
        //             meetsOn: 4,
        //             notes: ''
        //         };
        //         $scope.showNew = true;
        //     };
        // 
        //     $scope.remove = function (g) {
        //         g.$delete().then(function () {
        //             var index = $scope.groups.indexOf(g);
        //             $scope.groups.splice(index, 1);
        //         });
        //     }

        GroupData.latestReports().then(function (result) {
            $scope.groups = result.data;
        }, function(err) {
            console.log(err);
        });

    });
})();


(function () {
    'use strict';
    angular.module('app').controller('groupsEditController', function ($scope, $locale, $routeParams, $location, GroupData) {
    
        $scope.groupId = $routeParams.id;

        $scope.daysOfWeek = _.map($locale.DATETIME_FORMATS.DAY, function (x, i) {
            return { Id: i, Name: x };
        });

        $scope.save = function () {
             $scope.e.$update().then(function() {
                $location.path('/');
            });
        };

        $scope.cancel = function () {
            $location.path('/groups');
        };

        if($scope.groupId > 0) {
            Group.get({ id: $scope.groupId }).$promise.then(function (data) {
                $scope.e = data;
            });
        }         
        else {
            $scope.e = new Group();
            angular.extend($scope.e, 
            {
                id: 0,
                name: '',
                leader: '',
                meetsOn: 4,
                notes: ''
            });
        }
    });

})();


(function () {
    'use strict';

    angular.module('app').directive('mvGroups', function () {
        return {
            templateUrl: 'parts/groups/groupsTemplate.html',
            controller: 'groupsController'
        };
    });
})();

(function () {
    'use strict';

    angular.module('app').service('auth', function ($q, $http) {
    
        var login = function(user, pass) {
        
        }

    });

    angular.module('app').controller('loginController', function($scope, auth) {

    });
})();
(function () {
    'use strict';

    angular.module('app').factory('MeetingRPC', function($http) {
        var getPrevousReportsForGroup = function(id, password) {
            return $http.get('/api/meeting/getPrevousReportsForGroup/' + id).then(function(result) {
                return result.data;
            });
        };

        return {
            getPrevousReportsForGroup: getPrevousReportsForGroup
        };
    });
})();
(function () {
    'use strict';

    angular.module('app').controller('meetingsController', function ($scope, $routeParams, $location, Group, Meeting, MeetingRPC) {
        if ($routeParams.id === undefined) {
            $location.path('/');
            return;
        }

        $scope.groupId = $routeParams.id;

        $scope.save = function() {
            var e = new Meeting();
            angular.extend(e, {
                groupId: $routeParams.id,
                notes: $scope.e.notes,
                attendance: $scope.e.attendance 
            });
            e.$save().then(function(data) {
                $location.path('/');
            });
        };
    
        $scope.loadGroup = function(id) {
            Group.get({ id: id }).$promise.then(function (data) {
                $scope.group = data;
            });
        };

        $scope.loadPreviosReportsForGroup = function(id) {
            MeetingRPC.getPrevousReportsForGroup(id).then(function(data) {
               console.log(data);
               $scope.reports = data; 
            });
        };

        $scope.cancel = function() {
            $location.path('/');
        };
    
        $scope.loadGroup($scope.groupId);
        $scope.loadPreviosReportsForGroup($scope.groupId);
    });
})();
(function () {
    'use strict';

    angular.module('app').directive('mvMenu', function () {
        return {
            restrict: 'E',
            templateUrl: 'parts/menu/menuTemplate.html',
            controller: function($scope, $mdSidenav) {
                $scope.toggleSidenav = function (menuId) {
                    $mdSidenav(menuId).toggle(); 
                };  
            }
        };
    });
})();

(function() {
    'use strict';

    angular.module('app').controller('reportController', function($scope, $routeParams, $location, ReportData, GroupData) {

        GroupData.resource.get({ id: $routeParams.groupId }).$promise.then(function (data) {
            $scope.group = data;
        });

        $scope.save = function () {
            var e = new ReportData();
            angular.extend(e, {
                id: 0,
                groupId: $routeParams.groupId,
                notes: $scope.e.notes,
                attendees: [{ name: 'foo' }, { name: 'bar' }],
                date: $scope.e.date
            });
            e.$save().then(function (data) {
                $location.path('/');
            });
        };

        $scope.cancel = function() {
            $location.path('/');
        };

    });

})();
(function () {
    'use strict';

    angular.module('app').directive('mvTodos', function () {
        return {
            templateUrl: 'parts/todos/todosTemplate.html',
            controller: 'todoController'
        };
    });
})();

(function () {
    'use strict';

    angular.module('app').controller('todoController', function ($scope, Todo) {
    
        $scope.saveNew = function () {
            var entry = new Todo();
            angular.extend(entry, $scope.n);
            entry.$save().then(function (data) {
                $scope.todos.push(data);
                $scope.cancelNew();
            });
        };

        $scope.cancelNew = function () {
            $scope.showNewTodo = false;
        };

        $scope.saveEdit = function (t) {
            t.$update().then(function () {
                t.isEditing = false;
            });
        };

        $scope.cancelEdit = function (t) {
            t.title = t.previousTitle;
            t.isEditing = false;
        };

        $scope.openEdit = function (t) {
            t.previousTitle = t.title;
            t.isEditing = true;
        };

        $scope.add = function () {
            $scope.n = { title: '' };
            $scope.showNewTodo = true;
        };

        $scope.remove = function (t) {
            t.$delete().then(function () {
                var index = $scope.todos.indexOf(t);
                $scope.todos.splice(index, 1);
            });
        }

        $scope.toggleDone = function (t) {
            t.isDone = !t.isDone;
            t.$update();
        }
    
        Todo.query().$promise.then(function (data) {
            $scope.todos = data;
        });
    
    });
})();

(function () {
    'use strict';

    angular.module('app').factory('UserRPC', function($http) {
        var updatePassword = function(id, password) {
            return $http.put('/api/users/updatepassword/' + id, { password: password }).then(function(data) {
                return data;
            });
        };

        return {
            updatePassword: updatePassword
        };
    });
})();

(function () {
    'use strict';

    angular.module('app').controller('passwordModalController', function ($scope, $mdDialog) {


        $scope.okIsDisabled = function () {
            return $scope.password === undefined ||
                $scope.confirmPassword === undefined ||
                $scope.password !== $scope.confirmPassword;
        };

        $scope.modalOk = function () {
            $mdDialog.hide($scope.password);
        };

        $scope.modalCancel = function () {
            $mdDialog.cancel();
        };

        $scope.hide = function() {
            $scope.modalCancel();
        };
    });
})();
(function () {
    'use strict';

    angular.module('app').controller('usersController', function ($scope, $location, User) {
	
        $scope.edit = function (l) {
		    $location.path('/users/' + l.id);
        };

        $scope.new = function() {
            $location.path('/users/0');
        };
	
	    User.query().$promise.then(function(data) {
		    $scope.users = data;
	    });
    });
})();


(function () {
    'use strict';

    angular.module('app').directive('users', function () {
        return {
            templateUrl: 'parts/users/usersTemplate.html',
            controller: 'usersController'
        };
    });
})();


(function () {
    'use strict';

    angular.module('app').controller('usersEditController', function ($scope, $routeParams, $location, $mdDialog, Toaster, User, UserRPC) {

        $scope.userId = $routeParams.id;
        var edit_mode = $scope.userId !== 0;

        $scope.save = function () {
            $scope.e.$update().then(function() {
                $location.path('/users');
            }, function(err) {
                Toaster.toast(err.statusText);
            });
        };

        $scope.changePassword = function(event) {
            $mdDialog.show({
                controller: 'passwordModalController',
                templateUrl: 'parts/users/passwordModalTemplate.html',
                parent: angular.element(document.body),
                targetEvent: event,
                clickOutsiteToClose: true
            }).then(function(password) {
                if (edit_mode) {
                    UserRPC.updatePassword($scope.e.id, password);
                } else {
                    $scope.e.password = password;
                }
            });
        };

        $scope.is_save_button_disabled = function() {
            return !edit_mode && $scope.e.password === undefined;
        };

        $scope.$watch('e', function(x) { console.log(x); }, true);

        $scope.cancel = function () {
            $location.path('/users');
        };

        if (edit_mode) {
            User.get({ id: $scope.userId }).$promise.then(function (data) {
                $scope.e = data; 
            });
        }
        else {
            $scope.e = new User();
            angular.extend($scope.e,
            {
                id: 0,
                userName: '',
                email: '',
                isAdministrator: false
            });
        }
    });
})();

